org: owlrocks
app: serverless-test
service: 
  name: serverless-test

frameworkVersion: '2'

plugins:
  - serverless-pseudo-parameters

custom:
  userTable: user
  tableThroughputs:
    dev: "10"
  customProviderName: my.ether.login
  

provider:
  name: aws
  stage: dev
  profile: default
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  environment:
    DEVELOPER_PROVIDER_NAME: ${self:custom.customProviderName}
    USERTABLE_NAME: ${self:custom.userTable}
    IDENTITY_POOL_ID: { Ref: CognitoIdentityPool }
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:ExecuteStatement"
        - "dynamodb:PartiQLSelect"
      Resource:
        - "Fn::GetAtt": [UserTable, Arn]
        - "Fn::Join":
            - "/"
            - - { "Fn::GetAtt": [UserTable, Arn] }
              - "index/*"
    - Effect: "Allow"
      Action:
        - "cognito-identity:GetCredentialsForIdentity"
        - "cognito-identity:GetOpenIdTokenForDeveloperIdentity"
      Resource:
        - "Fn::Join":
            - "/"
            - - "arn:aws:cognito-identity:#{AWS::Region}:#{AWS::AccountId}:identitypool"
              - Ref: CognitoIdentityPool

functions:
  Login: ${file(resources/functions.yml):Login}
  GetNonce: ${file(resources/functions.yml):GetNonce}
  Signup: ${file(resources/functions.yml):Signup}
  Hello: ${file(resources/functions.yml):Hello}

resources:
  Resources:
    UserTable: ${file(resources/tables.yml):UserTable}
    CognitoIdentityPool: ${file(resources/cognito.yml):CognitoIdentityPool}
    CognitoAuthorizedRole: ${file(resources/cognito.yml):CognitoAuthorizedRole}
    CognitoUnAuthorizedRole: ${file(resources/cognito.yml):CognitoUnAuthorizedRole}
    CognitoIdentityPoolRolesMapping: ${file(resources/cognito.yml):CognitoIdentityPoolRolesMapping}

# functions:
#   hello:
#     handler: handler.hello
#     events:
#       - http:
#           path: /
#           method: get
